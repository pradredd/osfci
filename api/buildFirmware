# (c) Hewlett Packard Enterprise LP - 2020
#!/bin/bash -x

function check_requirements() {
	for i in jq openssl base64 curl
	do
		command=`which $i`
		if [ "$command" == "" ]
		then
			echo "Error: Please install $i or verify it is accessible through your default execution path variable"
			exit 1
		fi
	done
}

function help() {
   echo "build_firmware is a command line tool allowing you to build your OpenBMC or Linuxboot firmware from an OSFCI instance"
   echo ""
   echo "Mandatory options are:"
   echo "-f or --firmware <openbmc|linuxboot> : to select which firmware to download"
   echo "-g or --git : http address of a git repository"
   echo "-b or --branch : branch to use"
   echo "-t or --gittoken : personal access token for github.hpe.com"
   echo "-w or --wait : wait for end of compilation"
   exit 0
}

check_requirements

reuse="0"
waitServer="0"

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -g|--git)
    git="$2"
    shift # past argument
    shift # past value
    ;;
    -b|--branch)
    branch="$2"
    shift # past argument
    shift # past value
    ;;
    -f|--firmware)
    firmware="$2"
    shift # past argument
    shift # past value
    ;;
    -t|--gittoken)
    gitToken="$2"
    shift # past argument
    shift # past value
    ;;
    -w|--wait)
    waitServer="1"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    shift # past argument
    help
    exit 1
    ;;
esac
done

username=`cat $HOME/.osfci/auth | awk '{ print $1}'`

if [ "$firmware" == "" ]
then
echo "Error missing firmware parameter : -f|--firmware"
echo ""
help
fi

github=`echo "$git" | awk -F/ '{print $3}'`

if [ "$github" == "github.hpe.com" ]
then
   if [ "$gitToken" == "" ]
   then
   echo "Error missing gitToken parameter : -t|--gittoken"
   echo ""
   help
   fi
fi


accessKey=`cat $HOME/.osfci/auth | awk '{ print $2 }'`
secretKey=`cat $HOME/.osfci/auth | awk '{ print $3 }'`
serverName=`cat $HOME/.osfci/credential.txt | sed 's/{//' | sed 's/}//' | awk -F"," '{ print $1 }' | awk -F":" '{ print $2 }' | sed 's/"//g'`

if [ "$github" == "github.hpe.com" ]
then
curl -X PUT -H "Content-Type: text/plain" -d "$gitoken" "https://osfci.tech/ci/gitToken/$username"
fi

# We have to build now that we got a server
if [ "$firmware" == "linuxboot" ]
then
	command="buildbiosfirmware"
	machine="hpe/dl360gen10"
else
	if [ "$firmware" == "openbmc" ]
	then
		command="buildbmcfirmware"
		machine="dl360poc"
	fi
fi

dateFormatted=`TZ=GMT date -R`
relativePath="/ci/$command/$username"
contentType="text/plain"
stringToSign="PUT\n\n${contentType}\n${dateFormatted}\n${relativePath}"
signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${secretKey} -binary | base64`
echo "launching container"
curl -s -b $HOME/.osfci/$username.jar -d"$git $branch $machine 0" -X PUT \
-H "Host: osfci.tech" \
-H "mydate: ${dateFormatted}" \
-H "Content-Type: ${contentType}" \
-H "Authorization: OSF ${accessKey}:${signature}" \
"https://osfci.tech/ci/$command/$username"

if [ "$waitServer" == "1" ]
then
waitStatus="1"
while [ "$waitStatus" == "1" ]
do
	pollServer=`./getBuildStatus -f $firmware`
	serverStatus=`echo $pollServer | awk '{ print $4 }' | sed 's/\"//g'`
	if [ "$serverStatus" != "1" ]
	then
		echo "exiting on serverstatus $serverStatus"
		waitStatus=0
		exit 0
	fi
	sleep 5
done
fi
